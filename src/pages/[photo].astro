---
import { getCollection } from "astro:content";
import { getPhotosByNamesAndTags, resolveImage } from "../lib/photoHelper";
import AnnotatedLink from "../components/prose_components/annotatedLink.astro";
import TextContainer from "../components/prose_components/textContainer.astro";
import { LINKS } from "../lib/linkHelper";
import SmartImage from "../components/prose_components/smartImage.astro";
import MdImg from "../components/prose_components/mdImg.astro";
import MdLink from "../components/prose_components/mdLink.astro";
import Navbar from "../components/layout_components/navbar.astro";
import Layout from "../components/layout_components/layout.astro";
import fs from "fs";
import path from "path";
import { type Image } from "../lib/photoHelper";

export async function getStaticPaths() {
    const photoProjects = await getCollection("photo");
    return photoProjects.map((props) => ({
        params: { photo: props.slug },
        props: { props },
    }));
}

const {
    props: { data, ...props },
} = Astro.props;
const { Content } = await props.render();

let imagePromises: Promise<Image>[];

// first, try getting photos from
if (data.folder) {
    const folderPath = path.join(process.cwd(), "public", data.folder);
    if (fs.existsSync(folderPath)) {
        imagePromises = fs
            .readdirSync(folderPath)
            .filter((name) =>
                // only include images in this folder
                [".webp", ".jpg", ".jpeg", ".png"].includes(
                    path.parse(name).ext,
                ),
            )
            .map((name) =>
                // transform into image object
                resolveImage({
                    src: path.join(data.folder, name),
                }),
            );
    }
}

// if the folder didn't work, now try getting from photo data
if (!imagePromises || !imagePromises.length) {
    imagePromises = getPhotosByNamesAndTags(data)
        .sort((a, b) => b.rating + Math.random() - (a.rating + Math.random()))
        .map((p) => resolveImage({ photoData: p }));
}

const images = await Promise.all(imagePromises);

let coverImage: Image;
let coverIndex = -1;
if (data.cover) {
    // if cover is specified, try and resolve it
    coverImage = await resolveImage({ src: data.cover });
    coverIndex = images.findIndex((p) => p.src === coverImage.src);
}

if (!coverImage) {
    // if that didn't work, use first image
    coverImage = images[0];
    coverIndex = 0;
}

if (coverIndex !== -1) {
    // if cover is in list, remove it
    images.splice(coverIndex, 1);
}
---

<Layout title={data.title} cover={coverImage.src} class="justify-center">
    <Navbar righttext={props.slug.replaceAll("-", " ").toUpperCase()} />
    <main class="px-4 w-full max-w-[856px] flex flex-col items-center">
        {
            coverImage && (
                <SmartImage
                    {...coverImage}
                    class="relative w-full mt-4 sm:mt-8"
                    caption="right"
                />
            )
        }
        <!-- <div class="text-right text-gray-600 sm:mt-[12svh] mt-12">ↆ <button data-skip class="hover:underline italic">Skip to images</button> ↆ</div> -->
        <TextContainer {...data} class="sm:mt-[20svh] mt-20 max-w-[600px]">
            <Content components={{ a: MdLink, img: MdImg }} />
        </TextContainer>
        <div data-images class="w-full mt-[50vh]">
            {
                images.map((image) => {
                    const width = (768 * Math.sqrt(image.ratio)) / Math.sqrt(3 / 2);
                    const height = width / image.ratio;
                    return (
                        <div
                            class="flex justify-center"
                            style={`margin: max(200px, calc(50svh - ${height / 2}px)) 0;`}
                        >
                            <SmartImage
                                {...image}
                                class="relative max-w-full"
                                figStyle={`width: ${width}px;`}
                                caption="right"
                            />
                        </div>
                    );
                })
            }
        </div>
    </main>
    <footer class="mb-[50svh] mt-[20vh]">
        <span>More</span>
        <AnnotatedLink
            type="underline"
            staticUnderline={false}
            href={LINKS.index}
            class:list={"hover:mx-1"}>photography</AnnotatedLink
        >
        <span>-&gt;</span>
    </footer>
    <!-- <script>
        function initSkipToImages() {
            document.querySelector("[data-skip]").addEventListener("click", () => window.scrollTo({
                top: (document.querySelector("[data-images]") as HTMLElement).offsetTop,
                behavior: "smooth",
            }));
        }

        document.addEventListener("DOMContentLoaded", initSkipToImages);
        document.addEventListener("astro:after-swap", initSkipToImages);
    </script> -->
</Layout>
