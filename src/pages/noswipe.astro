---
import "../styles/global.css";
import Layout from "../components/layout_components/layout.astro";
import { getPhotoByName } from "../lib/photoHelper";
import type { PhotoName } from "../data/photoTypes.generated";
import { LINKS } from "../lib/linkHelper";
import AnnotatedLink from "../components/prose_components/annotatedLink.astro";
import AreaPriorityContainer from "../components/layout_components/areaPriorityContainer.astro";

const photoConfig = [
    {
        photos: [
            {
                name: "la-corbiere-st-brelade-jersey-2024-05-25",
                shadow: "4px 4px 0 rgba(10, 114, 123, 0.09)",
            },
        ],
        from: ["Palimpsest", LINKS.palimpsest],
    },
    {
        photos: [
            {
                name: "hell-awaits-falmouth-2021-10-30",
                border: "4px solid rgba(1, 113, 123, 0.09)",
            },
        ],
        from: ["Lingermyth", LINKS.lingermyth],
    },
    {
        photos: [
            {
                name: "north-atlantic-pennance-point-2021-01-14",
                border: "4px solid #e2e8f0",
            },
        ],
        from: ["Horizons", LINKS.horizons],
    },
    {
        photos: [
            {
                name: "shed-train-window-weymouth-2024-09-03",
            },
            {
                name: "bear-witness-belsize-park-2024-05-17",
                border: "3px solid #0A0907",
            },
        ],
        caption: "Bear, witness, Belsize Park. 2024.",
        from: ["Palimpsest", LINKS.palimpsest],
    },
    {
        photos: [
            {
                name: "cycling-gudmundsen-drive-door-county-2019-08-31",
                shadow: "4px 4px 0px rgba(0, 0, 0, 0.8)",
            },
        ],
        from: ["Heartland", LINKS.heartland],
    },
    {
        photos: [
            {
                name: "forest-library-isle-of-wight-2024-04-26",
                border: "3px solid #C8CDB9",
            },
        ],
        from: ["Palimpsest", LINKS.palimpsest],
    },
];

const toShow = 0; // Math.floor(Math.random() * photoConfig.length);
---

<Layout>
    <main
        class="flex justify-center items-center aspect-square w-[600px] pb-12"
        style="max-width: min(calc(100vh - 104px), calc(100vw - 32px));"
        data-swap-container>
        {
            photoConfig.map((set, i) => {
                const hidden = i !== toShow;
                const photoDataArr = set.photos.map((p: any) =>
                    getPhotoByName(p.name as PhotoName)
                );

                if (!set.caption) {
                    set.caption = photoDataArr[0].joinedCaption;
                }

                const ratioSum: number = photoDataArr.reduce(
                    (r, p) => r + p.ratio,
                    0
                );
                const groupWidth =
                    Math.sqrt(
                        1 / Math.max(...photoDataArr.map((p) => p.ratio))
                    ) *
                    Math.sqrt(ratioSum) *
                    100;

                const buildImgStyle = (photo: any) => {
                    let style = "";

                    if ("border" in photo) {
                        style += `border: ${photo.border};`;
                    }

                    if ("shadow" in photo) {
                        style += `box-shadow: ${photo.shadow};`;
                    }

                    if (set.photos.length > 1) {
                        style += `width: calc(${100 / set.photos.length}% - ${(16 * (set.photos.length - 1)) / set.photos.length}px);`;
                    }

                    return style;
                };

                return (
                    <figure
                        data-swap-child
                        class={hidden ? "hidden" : ""}
                        style={`width: ${groupWidth}%;`}>
                        <AreaPriorityContainer ratio={ratioSum}>
                            {set.photos.length > 1 ? (
                                <div class="flex gap-4">
                                    {set.photos.map((photo: any, i: number) => {
                                        return (
                                            <img
                                                data-swap-button
                                                src={
                                                    photoDataArr[i].paths[
                                                        photo.size ?? "medium"
                                                    ]
                                                }
                                                alt={
                                                    photoDataArr[i]
                                                        .joinedCaption
                                                }
                                                class="cursor-crosshair"
                                                style={buildImgStyle(photo)}
                                            />
                                        );
                                    })}
                                </div>
                            ) : (
                                <img
                                    data-swap-button
                                    src={
                                        photoDataArr[0].paths[
                                            set.photos[0]["size"] ?? "medium"
                                        ]
                                    }
                                    alt={photoDataArr[0].joinedCaption}
                                    class="cursor-crosshair"
                                    style={buildImgStyle(set.photos[0])}
                                />
                            )}
                        </AreaPriorityContainer>
                        <figcaption data-caption class="font-semibold text-sm">
                            <span class="fixed bottom-4 left-4">
                                {set.caption}
                            </span>
                            {set.from && (
                                <span class="fixed bottom-4 right-4">
                                    From:{" "}
                                    <AnnotatedLink
                                        type="circle"
                                        href={set.from[1]}>
                                        {set.from[0]}
                                    </AnnotatedLink>
                                </span>
                            )}
                        </figcaption>
                    </figure>
                );
            })
        }
    </main>
    <script>
        // const cardData = JSON.parse(document.currentScript.dataset.cards);
        let transitioning = false;
        function switchCard(downDOM: boolean = false) {
            const current = (document.querySelector(
                "[data-swap-child]:not(.hidden)"
            ) ??
                document.querySelector(
                    "[data-swap-child]:first-child"
                )) as HTMLElement;

            if (!current) {
                return;
            }

            let next = (
                downDOM
                    ? current.nextElementSibling
                    : current.previousElementSibling
            ) as HTMLElement;

            if (next == undefined) {
                next = (
                    downDOM
                        ? current.parentElement.firstElementChild
                        : current.parentElement.lastElementChild
                ) as HTMLElement;
            }

            current.classList.add("hidden");
            next.classList.remove("hidden");
        }

        function onHomePageLoad() {
            document.querySelectorAll("[data-swap-button]").forEach((e) =>
                e.addEventListener("click", () => {
                    if (transitioning) {
                        return;
                    }

                    transitioning = true;
                    switchCard();
                    transitioning = false;
                })
            );

            // fetch("/fonts/JunicodeVF-Roman.woff2", {
            //     priority: "low",
            //     mode: "same-origin",
            //     cache: "only-if-cached",
            //     headers: {
            //         "Content-Type": "font/woff2",
            //     },
            // });
        }

        onHomePageLoad();
        document.addEventListener("astro:after-swap", onHomePageLoad);
    </script>
</Layout>
