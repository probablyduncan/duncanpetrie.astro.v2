---
import type { RoughAnnotationType } from "rough-notation/lib/model";
import SmartLink from "./smartLink.astro";

interface Props {
    type?: RoughAnnotationType;
    staticUnderline?: boolean;
    href?: string;
    title?: string;
}

const {
    type = "underline",
    staticUnderline = true,
    ...passthrough
} = Astro.props;
---

<SmartLink
    {...passthrough}
    data-type={type}
    class:list={{
        "annotated-link focus-visible:outline-none": true,
        "hover:opacity-80 focus-visible:opacity-80 transition-opacity":
            type === "circle" || type === "box",
        "hover:text-white focus-visible:text-white": type === "highlight",
        "underline hover:no-underline": staticUnderline,
    }}><slot /></SmartLink
><script>
    //the script tag here is on the same line to prevent white space injection
    import { annotate } from "rough-notation";
    import type {
        RoughAnnotationConfig,
        RoughAnnotationType,
    } from "rough-notation/lib/model";

    (() => {
        function createAnnotationConfig(
            type: RoughAnnotationType
        ): RoughAnnotationConfig {
            const config: RoughAnnotationConfig = {
                type,
                color: "black",
                multiline: true,
            };

            switch (type) {
                case "circle":
                    config.animationDuration = 300;
                    config.iterations = 1;
                    config.padding = [5, 10];
                    break;
                case "highlight":
                    config.animationDuration = 450;
                    break;
                case "box":
                    config.animationDuration = 300;
                    config.iterations = 1;
                    config.padding = [5, 10];
                    break;
                case "underline":
                    config.animationDuration = 200;
                    config.strokeWidth = 3;
                    config.iterations = 1;
                    config.padding = [0, 0];
                    break;
            }

            return config;
        }

        function initAnnotatedLinks() {
            // const colors = ['salmon', 'cornflowerblue', 'coral', 'darkolivegreen', 'darkseagreen', 'darkslategrey', 'indianred', 'orangered']
            // const color = colors[Math.floor(Math.random() * colors.length)];

            document.querySelectorAll("a.annotated-link").forEach((_e) => {
                const link = _e as HTMLAnchorElement;
                const type = link.dataset.type as RoughAnnotationType;

                if (!type) {
                    return;
                }

                const annotation = annotate(link, createAnnotationConfig(type));

                function showAnimated() {
                    if (!annotation.isShowing()) {
                        annotation.animate = true;
                        annotation.show();
                    }
                }

                function showStatic() {
                    if (!annotation.isShowing()) {
                        annotation.animate = false;
                        annotation.show();
                    }
                }

                function hide() {
                    if (annotation.isShowing()) {
                        annotation.hide();
                    }
                }

                link.addEventListener("mouseenter", showAnimated);
                link.addEventListener("mouseleave", hide);
                link.addEventListener("focusin", showStatic);
                link.addEventListener("focusout", hide);
            });
        }

        initAnnotatedLinks();
        document.addEventListener("astro:after-swap", initAnnotatedLinks);

        // reset hover states when page is restored from bfcache
        window.addEventListener("pageshow", (e) => {
            if (e.persisted) {
                document
                    .querySelectorAll("a.annotated-link")
                    .forEach((link) => {
                        const leaveEvent = new MouseEvent("mouseleave", {
                            bubbles: true,
                            cancelable: true,
                            view: window,
                        });
                        link.dispatchEvent(leaveEvent);

                        if (document.activeElement === link) {
                            (document.activeElement as HTMLElement).blur();
                        }
                    });
            }
        });

        // new MutationObserver((mutations) => {
        //     mutations.forEach((mutation) => {
        //         if (mutation.addedNodes.length > 0) {
        //             console.log("Added nodes:", mutation.addedNodes);
        //         }
        //         if (mutation.removedNodes.length > 0) {
        //             console.log("Removed nodes:", mutation.removedNodes);
        //         }
        //     });
        // }).observe(document.body, { childList: true, subtree: true });
    })();
</script>
