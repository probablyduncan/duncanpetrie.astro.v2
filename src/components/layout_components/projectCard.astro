---
import type { PhotoName } from "../../data/photoTypes.generated";
import { resolveImage, type Image } from "../../lib/photoHelper";
import SmartLink from "../prose_components/smartLink.astro";
import SmartImage from "../prose_components/smartImage.astro";
import { toSeveral, type SingleOrSeveral } from "../../lib/singleOrSeveral";
import { resolveLink } from "../../lib/linkHelper";

interface Props {
    title: string;
    icon?: string;
    href?: string;
    titleLigatures?: boolean;
    titleIconSpace?: boolean;
    bottomIconSpace?: boolean;
    largeImage?: boolean;
    smallTitle?: boolean;
    shuffle?: boolean;
    images?: SingleOrSeveral<Image>;
    photos?: SingleOrSeveral<PhotoName>;
    srcs?: SingleOrSeveral<string>;
}

const {
    title,
    icon,
    href,
    titleLigatures = false,
    titleIconSpace = false,
    bottomIconSpace = false,
    largeImage = false,
    smallTitle = false,
    shuffle = false,
    photos = [],
    srcs = [],
    images = [],
} = Astro.props;

const resolvedImages = Promise.all(toSeveral(images).map(async image => await resolveImage(image)))
const resolvedPhotos = Promise.all(toSeveral(photos).map(async photoName => await resolveImage({ photoName })));
const resolvedSrcs = Promise.all(toSeveral(srcs).map(async src => await resolveImage({ src })));

const resolvedLink = href ? resolveLink({ href, title }) : {};

const allImages: Image[] = (await resolvedImages)
    .concat(await resolvedPhotos)
    .concat(await resolvedSrcs);

const guid = Math.random() * 1000;
---

<section>
    <div class:list={{ 
        swiper: true,
        "opacity-0 transition-opacity": true,
        shuffle,
    }}>
        <div class="swiper-wrapper">
            {
                allImages.map((image) => (
                    <div class="swiper-slide">
                        <div class="flex justify-center px-4">
                            <div class:list={[largeImage ? "max-w-xl" : "max-w-md", "w-full"]}>
                                <SmartImage {...image} caption="none" lazy={true} />
                            </div>
                        </div>
                    </div>
                ))
            }
        </div>
    </div>
    <div class="flex flex-col items-center px-5">
        <div class="max-w-md">
            <div class="font-medium text-right text-xs mt-1">
                <slot name="underimage" />
            </div>
            <h1
                class:list={[
                    "font-serif mt-8",
                    smallTitle ? "sm:text-4xl text-3xl" : "text-5xl",
                    { ligatures: titleLigatures },
                ]}
            >
                {href ? (<a {...resolvedLink} class="hover:underline focus:outline-black">{title}</a>) : (<>{title}</>)}<sup>{titleIconSpace ? " " : ""}<button tabindex="-1" class="transition-transform hover:rotate-12" data-icon={guid}>{icon}</button></sup>
            </h1>
            <div
                class="relative [&_>*]:pt-4 [&_>p:first-of-type]:arrow-indent hyphens-none pr-4"
            >
                <slot />
            </div>
            <div class:list={{"bg-black text-white invert": !!href}}>
                <a {...resolvedLink} tabindex="-1" data-icon={guid} class:list={{
                    "relative flex justify-between items-end mt-36 pt-1 px-1 pb-0.5 border-b-[3px]": true,
                    "text-black border-black": !href,
                    "text-white border-white": !!href,
                    "after:absolute after:top-0 after:right-0 after:bottom-0 after:left-0": !!href,
                    "after:origin-left after:scale-x-0 after:transition-transform": !!href,
                    "after:bg-white after:mix-blend-difference after:content-['']": !!href,
                    "focus:outline-none focus:after:transform-none hover:after:transform-none data-[focusing]:after:transform-none": !!href,
                }}>
                    <slot name="bottomleft">
                        <span class="italic">
                            <span class:list={{"font-serif text-lg": true, "pr-1": bottomIconSpace}}>{icon}</span>
                            <slot name="bottomline" />
                        </span>
                    </slot>
                    <slot name="bottomright">
                        <span class="text-xl">-&gt;</span>
                    </slot>
                </a>
            </div>
        </div>
    </div>
</section>
<script>
    import Swiper from "swiper";
    import "swiper/css";
    import { shuffleRef } from "../../lib/shuffle"

    document.addEventListener("DOMContentLoaded", function () {

        document.querySelectorAll(".swiper.shuffle").forEach((e) => {
            const slideContainer = e.children[0];
            const slides = Array.from(slideContainer.children);
            shuffleRef(slides);
            slideContainer.replaceChildren(...slides);
        });

        new Swiper(".swiper", {
            grabCursor: true,
            loop: true,
            on: {
                init: (s) => {
                    requestAnimationFrame(() => {
                        s.el.style.opacity = "1";
                    })
                }
            }
        });

        document.querySelectorAll("button[data-icon]").forEach(e => {
            const button = (e as HTMLButtonElement);
            const guid = button.dataset.icon;
            button.addEventListener("click", () => {
                const target = document.querySelector(`:not(button)[data-icon="${guid}"]`) as HTMLElement;
                
                window.scrollTo({
                    top: target.offsetTop + (target.offsetParent as HTMLElement).offsetTop - (window.innerHeight*3/4),
                    behavior: "smooth",
                });

                setTimeout(() => {

                    target.dataset.focusing = "true";

                    setTimeout(() => {
                        delete target.dataset.focusing;
                    }, 800);

                }, 200);
            })
        });
    });
</script>
